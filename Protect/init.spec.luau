return function()
	local Protect = require(script.Parent)
	it("Should create a protect",function() 
		local protect = Protect.new(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
		end)
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("Success")
	end)
	it("Should thrown an error with :prevent",function() 
		local protect = Protect.new(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
			error("Thrown an error")
		end):prevent(print)
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("Debug")
	end)
	it("Should resolve a protect function",function() 
		local protect = Protect.new(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
			resolve("value")
		end)
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("Resolved")
	end)
	it("Should cancel the current call",function() 
		local protect = Protect.delay(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
			OnCancel(function() 
				warn("i'm gonna be cancelled")
			end)
			warn("running")
		end,0.01)
		protect:cancel()
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("HandlerCancelled")
	end)
	it("Should reject the current call",function() 
		local protect = Protect.new(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
			reject("test")
			print("here")
		end)
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("Rejected")
	end)
	it("Should spawn the current call",function() 
		local protect = Protect.spawn(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
			task.wait(5)
			print("print after 5 seconds")	
		end)
		print("no yield")
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("Success")
	end)
	it("Should run each function on the current protect call",function() 
		local array_of_fn = {
			function(reject,resolve,cancel_handler)
				print("run1")
			end,
			function(reject,resolve,cancel_handler)
				print("run2")
			end,
			function(reject,resolve,cancel_handler)
				print("run3")
			end,
			function(reject,resolve,cancel_handler)
				reject("run4")
			end,
		}
		local protect = Protect.each(array_of_fn)
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal("Rejected")
	end)
	it("Should destroy the protected call instantly",function() 
		local protect = Protect.delay(function(reject: (reject_message: any) -> (), resolve: (value_to_resolve: any) -> any, OnCancel: (fn: (() -> ())?) -> ()) 
			OnCancel(function() 
				warn("i'm gonna be cancelled")
			end)
			warn("running")
		end,0.01)
		protect:Destroy()
		expect(protect).to.be.a("table")
		expect(protect.Status).to.be.equal(nil)
	end)
end
